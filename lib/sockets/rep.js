// Generated by CoffeeScript 1.4.0
(function() {
  var RepSocket, Socket, debug, types, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('./socket'), Socket = _ref.Socket, types = _ref.types;

  debug = require('debug')('socketmq:rep');

  RepSocket = (function(_super) {

    __extends(RepSocket, _super);

    function RepSocket(context, options) {
      RepSocket.__super__.constructor.call(this, context, 'rep', options);
      this.inBuffer = [];
      this.lastConn = null;
    }

    RepSocket.prototype.send = function(data) {
      var msg;
      if (this.lastConn) {
        this.context.send(this, this.lastConn, data);
        this.lastConn = null;
      } else {
        this.drop(data, "Cannot send reply until next request recevied");
      }
      if (this.inBuffer.length > 0) {
        msg = this.inBuffer.shift();
        return this.handleMessage(msg.conn, msg.data);
      }
    };

    RepSocket.prototype.handleMessage = function(conn, data) {
      if (this.lastConn === null) {
        this.lastConn = conn;
        return this.emit('message', data);
      } else {
        return this.inBuffer.push({
          conn: conn,
          data: data
        });
      }
    };

    return RepSocket;

  })(Socket);

  module.exports = RepSocket;

}).call(this);
